{"version":3,"sources":["logo.svg","components/Tile/Tile.js","components/StartBtn/StartBtn.js","components/ScoreBoard/ScoreBoard.js","components/WinnerModal/WinnerModal.js","components/GameBoard/GameBoard.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Tile","this","props","symbol","onClick","className","React","Component","StartBtn","btnText","ScoreBoard","score","WinnerModal","winner","GameBoard","checkWinner","currentTiles","winningMoves","xWins","some","move","every","index","includes","oWins","setState","undefined","paused","xScore","state","oScore","togglePlayer","currentPlayer","handleClick","tiles","started","handleRestart","Array","fill","handleStart","finished","tile","map","key","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.a3f63c01.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport './Tile.css';\n\nclass Tile extends React.Component {\n  render () {\n    const { symbol, onClick } = this.props;\n\n    return (\n      <div className=\"tile\" onClick={onClick}>\n        {symbol || ''}\n      </div>\n    )\n  }\n}\n\nexport default Tile;","import React from 'react';\nimport './StartBtn.css';\n\nfunction StartBtn(props) {\n  const { btnText, onClick } = props;\n\n  return (\n    <div className=\"startbtn\">\n      <button onClick={onClick}>\n        {btnText || 'Start'}\n      </button>\n    </div>\n  )\n}\n\nexport default StartBtn;","import React from 'react';\n\nfunction ScoreBoard(props) {\n  const { symbol, score } = props;\n\n  return (\n    <div className=\"scoreboard\">\n      <p>Player {symbol}</p>\n      <p>{score}</p>\n    </div>\n  )\n}\n\nexport default ScoreBoard;","import React from 'react';\nimport './WinnerModal.css';\n\nconst WinnerModal = ({ winner }) => (\n  <div className=\"winner-modal\">\n    <div className=\"winner-modal__box\">\n      Winner winner chicken dinner\n      <br />\n      {winner ? `Winner is ${winner}`: \"It's a draw!\"}\n    </div>\n  </div>\n)\n\nexport default WinnerModal;","import React from 'react';\nimport './GameBoard.css';\nimport Tile from '../Tile/Tile'; \nimport StartBtn from '../StartBtn/StartBtn';\nimport ScoreBoard from '../ScoreBoard/ScoreBoard';\nimport WinnerModal from '../WinnerModal/WinnerModal';\n\nclass GameBoard extends React.Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      tiles: Array(9).fill(''),\n      currentPlayer: 'X',\n      started: false,\n      paused: false,\n      winner: '',\n      xScore: 0,\n      oScore: 0\n    }\n  }\n\n  checkWinner = (currentTiles) => {\n    const winningMoves = [\n      [0, 1, 2],\n      [3, 4, 5],\n      [6, 7, 8],\n      [0, 3, 6],\n      [1, 4, 7],\n      [2, 5, 8],\n      [0, 4, 8],\n      [2, 4, 6]\n    ];\n\n    const xWins = winningMoves.some(move => \n      move.every(index => currentTiles[index].includes('X')))\n\n    const oWins = winningMoves.some(move => \n      move.every(index => currentTiles[index].includes('O')))\n\n    this.setState({\n      winner: xWins ? \"X\" : oWins ? \"O\" : undefined,\n      paused: xWins || oWins,\n      xScore: this.state.xScore + (xWins ? 1 : 0),\n      oScore: this.state.oScore + (oWins ? 1 : 0)\n    })\n  }\n\n  togglePlayer = () => {\n    this.setState({\n      currentPlayer: this.state.currentPlayer === 'X' ? 'O' : 'X'\n    })\n  }\n\n  handleClick = index => {\n    if (this.state.tiles[index] || !this.state.started || this.state.paused) return\n    \n    const currentTiles = [...this.state.tiles];\n    currentTiles[index] = this.state.currentPlayer;\n    \n    this.setState({\n      tiles: currentTiles\n    })\n    \n    this.togglePlayer();\n    this.checkWinner(currentTiles);\n  }\n\n  handleRestart = () => {\n    this.setState({\n      started: false,\n      paused: true,\n      tiles: Array(9).fill(''),\n      winner: ''\n    });\n  }\n\n  handleStart = () => {\n    this.setState({\n      started: true,\n      paused: false\n    });\n  }\n\n  render () {\n    const { tiles, xScore, oScore, started, winner } = this.state;\n    const finished = tiles.every(tile => tile)\n\n    return (\n      <div className=\"gameboard\">\n        <h1>Tic Tac Toe</h1>\n        <div className=\"gameboard__tiles-section\">\n          <div className=\"gameboard__tiles-container\">\n            <div className=\"gameboard__tiles\">\n              {tiles.map((tile, index) => (\n                <Tile \n                  key={index}\n                  onClick={() => this.handleClick(index)}\n                  symbol={tile} \n                />\n              ))}\n            </div>\n          </div>\n        </div>\n        {started && \n          <StartBtn \n            onClick={() => this.handleRestart()}\n            btnText=\"Restart\"\n          />\n        }\n        {!started &&\n          <StartBtn onClick={() => this.handleStart()} />\n        }\n        <div className=\"gameboard__scoreboard-container\">\n          <ScoreBoard \n            symbol=\"X\"\n            score={xScore}\n          />\n          <ScoreBoard \n            symbol=\"O\"\n            score={oScore}\n          />\n        </div>\n        {(finished || winner) && <WinnerModal winner={winner} />}\n      </div>\n    )\n  }\n}\n\nexport default GameBoard;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport GameBoard from './components/GameBoard/GameBoard';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <GameBoard />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}